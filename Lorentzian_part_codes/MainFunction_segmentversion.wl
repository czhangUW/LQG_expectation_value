(* ::Package:: *)

Get["preliminary.wl"]
LaunchKernels[96]
f[n_,x_]:=1/2 Abs[x-n]+1/2 (x-n)
rule0ListV0=Tuples[{1,2,3,4,5},5];
rule0ListV0=Cases[rule0ListV0,x_/;f[3,x[[1]]+x[[2]]]+f[3,x[[3]]+x[[4]]]+x[[5]]<=3];
rule0List={m[1]->#[[1]],m[2]->#[[2]],m[3]->#[[3]],m[4]->#[[4]],m[5]->#[[5]]}&/@rule0ListV0;
v=vertex[{0,0,0}];
vlist=Table[vertex[{i,j,k}],{i,-1,1},{j,-1,1},{k,-1,1}]//Flatten;
elist=Table[{i,si,j,sj,k,sk},{i,1,3},{si,-1,1,2},{j,1,3},{sj,-1,1,2},{k,1,3},{sk,-1,1,2}]//Flatten[#,5]&;
elist=DeleteCases[elist,{x_,_,x_,_,z_,_}|{z_,_,x_,_,x_,_}|{x_,_,z_,_,x_,_}];
allv=Join[Tuples[{{v},vlist}],Tuples[{vlist,{v}}]]//DeleteDuplicates;
allvAnde=Tuples[{allv,elist}];
allvAnde=DeleteCases[allvAnde,x_/;!judgeKoperator@@x];
allvAnde4Hl0=Flatten[#,1]&/@Tuples[allvAnde,2];
allvAnde4Hl1=GatherBy[allvAnde4Hl0,{#[[1]],Drop[#[[2]],-1],#[[3]],Drop[#[[4]],-1]}&][[All,1]];
allvAnde4Hl1=ParallelMap[ReplacePart[#,{{2,6},{4,6}}->1]&,allvAnde4Hl1];
allvAnde4Hl1=DeleteDuplicatesBy[allvAnde4Hl1,loopsymmetry];
allvAnde4Hl=DeleteDuplicatesBy[allvAnde4Hl1,rotation];
filesName=Table[StringJoin[{"./result/result",ToString[i1],".txt"}],{i1,1,Length[allvAnde4Hl]}];
Print[Length[allvAnde4Hl]];
i1list=Position[FileExistsQ/@filesName,False]//Flatten;
(*Print[i1list];*)
ParallelDo[
Clear[factorWDinn];
Block[{operator0,operatorList,factorlist,operatorpurelist,decoupleOperatorlist,WDs,orderWDs,orderedWDs,inns,AllWDsinns,ToGraph,Graphs,connectinglist,connectingRule,connectedOps,AllbasicWDinn,basicWDinn,NewWDinnfactor,otherfactor,Newfactorlist,time,final,summation},
operatorList=(Hl[indh[1,#]&,{allvAnde4Hl[[i1,1,1]],2m[1],indP[1,#]&,allvAnde4Hl[[i1,1,2]],allvAnde4Hl[[i1,2]],indh[2,#]&,indP[2,#]&,2m[2]},
{allvAnde4Hl[[i1,3,1]],2m[3],indP[3,#]&,allvAnde4Hl[[i1,3,2]],allvAnde4Hl[[i1,4]],indh[3,#]&,indP[4,#]&,2m[4]},
indP[5,#]&,2m[5],indP[6,#]&,indP[7,#]&,indP[8,#]&,indP[9,#]&,indP[10,#]&,indP[11,#]&,indh[4,#]&,indh[5,#]&,indh[6,#]&,indh[7,#]&,True]);
factorlist=Times@@#&/@(Cases[#,Except[_NonCommutativeMultiply]]&/@operatorList);
operatorpurelist=NonCommutativeMultiply@@#&/@(Cases[#,_NonCommutativeMultiply]&/@operatorList);
decoupleOperatorlist=ToDecoupleOps/@operatorpurelist;
WDs=Cases[#,_WD]&/@factorlist;
orderedWDs=Map[orderWDindP,WDs];
inns=Cases[#,_inn]&/@factorlist;
AllWDsinns=MapThread[Join,{orderedWDs,inns}];
ToGraph=AllWDsinns/.{WD[v_,e_,z_,x_,y_]:>UndirectedEdge[x,y],inn[ij_,x_,y_]:>UndirectedEdge[x,y]};
Graphs=Map[Graph,ToGraph];
connectinglist=Map[ConnectedComponents,Graphs];
connectingRule=Map[(Thread/@Thread[Rule[#,Range[Length[#]]]])&,connectinglist];
connectingRule=Flatten/@connectingRule;
connectedOps=MapThread[GatherBy[#1,Function[u,Last[u]/.#2]]&,{AllWDsinns,connectingRule}];
AllbasicWDinn=Map[uniformWDinn,connectedOps,{2}];
basicWDinn=Flatten[AllbasicWDinn[[All,All,1;;2]],1]//DeleteDuplicates;
creatfacs/@basicWDinn;
NewWDinnfactor=Times@@@Apply[factorWDinn,AllbasicWDinn[[All,All,2;;3]],{2}];
otherfactor=Times@@@(Cases[#,Except[_WD|_inn]]&/@factorlist);
Newfactorlist=NewWDinnfactor otherfactor;
{time,final}=Table[expectedValueOneTerm[decoupleOperatorlist[[i]],Newfactorlist[[i]],rule0List,7],{i,1,Length[decoupleOperatorlist]}]//AbsoluteTiming;
summation=Total[final]//Expand;
Export[filesName[[i1]],InputForm[{i1,summation}]];
Print[{i1,time}];
]
,{i1,i1list},Method->"FinestGrained"]
(*******============================================================*********)
rtable=ParallelMap[ToExpression[Import[#]]&,filesName];
rtable=Flatten[#,1]&/@(List@@@rtable);
orientations=ParallelMap[ToorienteEdges[allvAnde4Hl[[#]]]&,rtable[[All,1]]];
expectedValues=Parallelize[MapThread[Times,{orientations,rtable[[All,2]]}]];
totalresult=Total[expectedValues];
Export["finalResult.txt",InputForm[totalresult]]
